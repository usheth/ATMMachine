buildscript {
    apply from: 'versions.gradle'
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.1.4.RELEASE")
    }
}

plugins {
    id "org.sonarqube" version "2.7.1"
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
group 'ATMMachine'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.8

bootJar {
    baseName = 'ATMMachine'
    version =  '0.0.0'
}

repositories {
    mavenCentral()
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.11.2'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.11.2'
    compile("org.springframework.boot:spring-boot-starter-web")
    compile group: 'org.hibernate', name: 'hibernate-gradle-plugin', version: '5.4.3.Final'
    testCompile "org.testng:testng:${testNgVer}"
    testCompile "org.assertj:assertj-core:${assertjVer}"
    testCompile group: 'org.mockito', name: 'mockito-all', version:'1.9.5'
    testCompile('org.springframework.boot:spring-boot-starter-test')
    compile group: 'org.springframework', name: 'spring-jdbc', version: '5.1.8.RELEASE'
    compile group: 'org.springframework', name: 'spring-orm', version: '5.1.8.RELEASE'
    compile group: 'mysql', name: 'mysql-connector-java', version: '5.1.47'
    compile group: 'javax.enterprise', name: 'cdi-api', version: '2.0'
}

apply plugin: 'jacoco'
jacoco {
    toolVersion = "$jacocoVer"
}

//Jacoco Test report will be generated at location ${buildDir}/jacocoHtml
jacocoTestReport {
    reports {
        xml.enabled = true
        csv.enabled = false
        html.destination "${buildDir}/jacocoHtml"
    }

    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    '**/*CustomerMicroserviceApp**'
            ])
        })
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            enabled = true
            element = 'BUNDLE'
            excludes = ['com.automationanywhere.cognitive.service.customer.*']
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.24
            }
        }
        rule {
            enabled = true
            element = 'BUNDLE'
            excludes = ['com.automationanywhere.cognitive.service.customer.*']
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.11
            }
        }
        rule {
            enabled = true
            element = 'METHOD'
            limit {
                counter = 'COMPLEXITY'
                value = 'TOTALCOUNT'
                maximum = 10
            }
        }
    }
}

check.dependsOn jacocoTestCoverageVerification

test {
    // enable TestNG support (default is JUnit)
    useTestNG()

    jacoco {
        append = false
        destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
        classDumpDir = file("$buildDir/jacoco/classpathdumps")
    }
    finalizedBy jacocoTestReport
}

